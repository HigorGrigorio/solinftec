# -----------------------------------------------------------------------------
# (C) 2023 Higor Grigorio (higorgrigorio@gmail.com)  (MIT License)
# -----------------------------------------------------------------------------
import os
from typing import TypedDict

from olympus.domain import ValueObject
from olympus.monads import result, guard_all


class FileProps(TypedDict):
    name: str
    path: str
    extension: str


class File(ValueObject[FileProps]):
    """
    File value object. The file that represents the file metadata generated by
    the application. It is the file that will be stored in the storage. In this application,
    the supported file format is PNG, so the file must end with .png.
    """

    def __init__(self, props: FileProps):
        super().__init__(props)

    @classmethod
    def new(cls, name: str, path: str, extension: str) -> result.Result['File']:
        """
        Creates a file path from a string.

        -----------
        Parameters:
        -----------
            name (str): File name.
            path (str): File path.
            extension (str): File extension.

        :return: result object.
        """

        # TODO: get supported extensions from config
        supported_extensions = ['png']

        props = {
            "name": name,
            "path": path,
            "extension": extension,
        }

        return result.W(
            guard_all(
                props,
                {
                    "file": '!empty',
                    "path": '!empty',
                    "extension": '!empty|in[' + ','.join(supported_extensions) + ']',
                },
                {
                    "extension": 'the extension must be png.',
                }
            )
        ).bind(lambda: cls(props))

    @classmethod
    def from_string(cls, value: str) -> result.Result['File']:
        """
        Creates a file path from a string.

        :param value:
        :return:
        """
        crops = value.split('/')
        name, extension = crops.pop().split('.')
        path = '/'.join(crops)

        return cls.new(name, path, extension)

    def get_name(self) -> str:
        """
        Returns the file without the path and extension.

        :return: The file without the path and extension.
        """
        return self.to_value()["name"]

    def get_path(self) -> str:
        """
        Returns the file path without the file.

        :return: The file path without the file.
        """
        return self.to_value()["path"]

    def get_location(self) -> str:
        """
        Returns the file path with the file and extension.

        :return:  The file path with the file and extension.
        """
        return self.get_path() + '/' + self.get_name() + '.' + self.get_extension()

    def create_path(self) -> result.Result[None]:
        """
        Creates the file path.

        :return: None.
        """
        try:
            os.makedirs(self.get_path(), exist_ok=True)
            return result.ok(None)
        except Exception as e:
            return result.fail('cannot create path: ' + str(e))

    def get_extension(self) -> str:
        """
        Returns the file extension.

        :return: The file extension.
        """
        return self.to_value()["extension"]

    def __str__(self):
        return self.get_path()

    def __repr__(self):
        return f'File({self.to_value()})'
